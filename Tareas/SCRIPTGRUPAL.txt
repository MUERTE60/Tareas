
IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'Aiport')
BEGIN
    PRINT 'La base de datos no existe, Procediendo a crearla';
    CREATE DATABASE Aiport;
END
    PRINT 'La base de datos ya existe';
	GO

USE Aiport;
GO






BEGIN TRANSACTION;
BEGIN TRY

IF OBJECT_ID('Customer_Type') IS NULL
    BEGIN
		CREATE TABLE Customer_Type (
		id INT PRIMARY KEY,
		name_type NVARCHAR(100) CHECK (LEN(name_type) > 0),
		NIT INT CHECK (NIT > 0)
									);
	END;


IF OBJECT_ID('Customer') IS NULL
BEGIN
    CREATE TABLE Customer (
    id INT PRIMARY KEY,
    first_name NVARCHAR(100) CHECK (LEN(first_name) > 0),
    last_name NVARCHAR(100) CHECK (LEN(last_name) > 0),
    phone_number NVARCHAR(50) CHECK (LEN(phone_number) >= 8),
    email NVARCHAR(100) CHECK (email LIKE '%_@__%.__%'),
    customer_type_id INT,
    FOREIGN KEY (customer_type_id) REFERENCES Customer_Type(id)
);

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_customer_type_id' AND object_id = OBJECT_ID('Customer'))
    BEGIN
        CREATE INDEX idx_customer_type_id ON Customer(customer_type_id);
    END
END;



IF OBJECT_ID('Type_Person') IS NULL
BEGIN
    CREATE TABLE Type_Person (
    id INT PRIMARY KEY,
    name_type NVARCHAR(100) CHECK (LEN(name_type) > 0)
);
END


IF OBJECT_ID('Types_of_Luggages') IS NULL
BEGIN
    CREATE TABLE Types_of_Luggages (
    id INT PRIMARY KEY,
    name_type NVARCHAR(100) CHECK (LEN(name_type) > 0),
    description NVARCHAR(255),
    tariff INT CHECK (tariff >= 0)
);
END


IF OBJECT_ID('Status_Ticket') IS NULL
BEGIN
    CREATE TABLE Status_Ticket (
    id INT PRIMARY KEY,
    status_name NVARCHAR(100) CHECK (LEN(status_name) > 0)
);
END


IF OBJECT_ID('Type_Flight') IS NULL
BEGIN
    CREATE TABLE Type_Flight (
    id INT PRIMARY KEY,
    name_type NVARCHAR(100) CHECK (LEN(name_type) > 0)
);
END


IF OBJECT_ID('Status_Flight') IS NULL
BEGIN
    CREATE TABLE Status_Flight (
    id INT PRIMARY KEY,
    status_name NVARCHAR(100) CHECK (LEN(status_name) > 0)
);
END
GO

IF OBJECT_ID('Status_FT') IS NULL
BEGIN
    CREATE TABLE Status_FT (
    id INT PRIMARY KEY,
    description_Status NVARCHAR(100) CHECK (LEN(description_Status) > 0)
);
END
GO

IF OBJECT_ID('Compensation_Detail') IS NULL
BEGIN
    CREATE TABLE Compensation_Detail (
        id INT PRIMARY KEY,
        compensation_type NVARCHAR(100) CHECK (LEN(compensation_type) > 0),
        compensation_amount DECIMAL(10, 2) CHECK (compensation_amount >= 0),
        issue_by INT CHECK (issue_by > 0),
        issue_date DATE CHECK (issue_date <= GETDATE()),
        expiration_date DATE
    );
END
GO


IF OBJECT_ID('Gate_Status') IS NULL
BEGIN
    CREATE TABLE Gate_Status (
    id INT PRIMARY KEY,
    status_name NVARCHAR(100) CHECK (LEN(status_name) > 0)
);
END
GO


IF OBJECT_ID('Currency') IS NULL
BEGIN
    CREATE TABLE Currency (
    id INT PRIMARY KEY,
    name NVARCHAR(50) CHECK (LEN(name) > 0),
    exchange_rate DECIMAL(10, 4) CHECK (exchange_rate > 0)
);
END
GO


IF OBJECT_ID('Booking_Status') IS NULL
BEGIN
    CREATE TABLE Booking_Status (
    id INT PRIMARY KEY,
    name_status NVARCHAR(100) CHECK (LEN(name_status) > 0)
);
END
GO

IF OBJECT_ID('Ticket_Category') IS NULL
BEGIN
    CREATE TABLE Ticket_Category (
    id INT PRIMARY KEY,
    category_name NVARCHAR(100) CHECK (LEN(category_name) > 0)
);
END
GO

IF OBJECT_ID('Penalty_Cancellation') IS NULL
BEGIN
    CREATE TABLE Penalty_Cancellation (
    id INT PRIMARY KEY,
    cancellation_type NVARCHAR(100) CHECK (LEN(cancellation_type) > 0),
    amount INT CHECK (amount >= 0)
);
END
GO


IF OBJECT_ID('Category') IS NULL
BEGIN
    CREATE TABLE Category (
    id INT PRIMARY KEY,
    category_name NVARCHAR(100) CHECK (LEN(category_name) > 0),
    description_category NVARCHAR(255) CHECK (LEN(description_category) > 0)
);
END
GO

IF OBJECT_ID('Paymnet_Status') IS NULL
BEGIN
    CREATE TABLE Payment_Status (
    id INT PRIMARY KEY,
    name_status NVARCHAR(100) CHECK (LEN(name_status) > 0)
);
END
GO

IF OBJECT_ID('Rol_Tripulante') IS NULL
BEGIN
    CREATE TABLE Rol_Tripulante (
    id INT PRIMARY KEY,
    name_rol NVARCHAR(100) CHECK (LEN(name_rol) > 0)
);
END
GO

IF OBJECT_ID('Type_Document') IS NULL
BEGIN
    CREATE TABLE Type_Document (
    id INT PRIMARY KEY,
    name_document NVARCHAR(100) CHECK (LEN(name_document) > 0)
);
END
GO



IF OBJECT_ID('Category_Assignment') IS NULL
BEGIN
    CREATE TABLE Category_Assignment (
    id INT PRIMARY KEY,
    assignment_date DATE CHECK (assignment_date <= GETDATE()),
    category_id INT,
    customer_id INT,
    FOREIGN KEY (category_id) REFERENCES Category(id),
    FOREIGN KEY (customer_id) REFERENCES Customer(id)
);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_customer_id' AND object_id = OBJECT_ID('Category_Assignment'))
    BEGIN
        CREATE INDEX idx_customer_id ON Category_Assignment(customer_id);
    END

    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_category_id' AND object_id = OBJECT_ID('Category_Assignment'))
    BEGIN
        CREATE INDEX idx_category_id ON Category_Assignment(category_id);
    END
END
GO



IF OBJECT_ID('Frequent_Flyer_Card') IS NULL
BEGIN
    CREATE TABLE Frequent_Flyer_Card (
    id INT PRIMARY KEY,
    milles INT CHECK (milles >= 0),
    Meal_code INT CHECK (Meal_code >= 0),
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES Customer(id)
);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_customer_id_flyer' AND object_id = OBJECT_ID('Frequent_Flyer_Card'))
    BEGIN
        CREATE INDEX idx_customer_id_flyer ON Frequent_Flyer_Card(customer_id);
    END
END
GO


IF OBJECT_ID('Gate_Assignment_Status') IS NULL
BEGIN
    CREATE TABLE Gate_Assignment_Status (
    id INT PRIMARY KEY,
    date_Assignment DATE CHECK (date_Assignment <= GETDATE()),
    Gate_Status_id INT,
    FOREIGN KEY (Gate_Status_id) REFERENCES Gate_Status(id)
);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_gate_status_id' AND object_id = OBJECT_ID('Gate_Assignment_Status'))
    BEGIN
        CREATE INDEX idx_gate_status_id ON Gate_Assignment_Status(Gate_Status_id);
    END
END
GO


IF OBJECT_ID('Boarding_Pass') IS NULL
BEGIN
    CREATE TABLE Boarding_Pass (
        id INT PRIMARY KEY,
        boarding_pass_date DATE CHECK (boarding_pass_date <= GETDATE()),
        boarding_time DATETIME
    );
END
GO


IF OBJECT_ID('Check_In') IS NULL
BEGIN
    CREATE TABLE Check_In (
    id INT PRIMARY KEY,
    check_in_time DATETIME CHECK (check_in_time <= GETDATE()),
    boarding_pass_id INT,
    FOREIGN KEY (boarding_pass_id) REFERENCES Boarding_Pass(id)
);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_check_in_boarding_pass_id' AND object_id = OBJECT_ID('Check_In'))
    BEGIN
        CREATE INDEX idx_check_in_boarding_pass_id ON Check_In (boarding_pass_id);
    END
END
GO


IF OBJECT_ID('Request_Assistance') IS NULL
BEGIN
    CREATE TABLE Request_Assistance (
    id INT PRIMARY KEY,
    request_date DATE CHECK (request_date <= GETDATE()),
    assistance_type NVARCHAR(100) CHECK (LEN(assistance_type) > 0),
    description NVARCHAR(255),
    Status NVARCHAR(100) CHECK (LEN(Status) > 0),
    check_in_id INT,
    FOREIGN KEY (check_in_id) REFERENCES Check_In(id)
);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_request_assistance_check_in_id' AND object_id = OBJECT_ID('Request_Assistance'))
    BEGIN
        CREATE INDEX idx_request_assistance_check_in_id ON Request_Assistance (check_in_id);
    END
END
GO


IF OBJECT_ID('Airline') IS NULL
BEGIN
    CREATE TABLE Airline (
    id INT PRIMARY KEY,
    name NVARCHAR(100) CHECK (LEN(name) > 0),
    code_iata INT CHECK (code_iata > 0)
);
END
GO

IF OBJECT_ID('Country') IS NULL
BEGIN
    CREATE TABLE Country (
    id INT PRIMARY KEY,
    name NVARCHAR(100) CHECK (LEN(name) > 0)
);
END
GO

IF OBJECT_ID('City') IS NULL
BEGIN
    CREATE TABLE City (
    id INT PRIMARY KEY,
    name NVARCHAR(100) CHECK (LEN(name) > 0),
    country_id INT,
    FOREIGN KEY (country_id) REFERENCES Country(id)
);
END
GO

IF OBJECT_ID('Airport') IS NULL
BEGIN
    CREATE TABLE Airport (
    id INT PRIMARY KEY,
    name_airport NVARCHAR(100) CHECK (LEN(name_airport) > 0),
    city_id INT,
    FOREIGN KEY (city_id) REFERENCES City(id)
);
END
GO

IF OBJECT_ID('Flight_Number') IS NULL
BEGIN
    CREATE TABLE Flight_Number (
    id INT PRIMARY KEY,
    departure_time DATETIME CHECK (departure_time >= GETDATE()),
    description_flight NVARCHAR(100) CHECK (LEN(description_flight) > 0),
    airport_start_id INT,
    airport_goal_id INT,
    airline_id INT,
    FOREIGN KEY (airline_id) REFERENCES Airline(id),
    FOREIGN KEY (airport_start_id) REFERENCES Airport(id),
    FOREIGN KEY (airport_goal_id) REFERENCES Airport(id)
);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_airport_start_id' AND object_id = OBJECT_ID('Flight_Number'))
    BEGIN
        CREATE INDEX idx_airport_start_id ON Flight_Number(airport_start_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_airport_goal_id' AND object_id = OBJECT_ID('Flight_Number'))
    BEGIN
        CREATE INDEX idx_airport_goal_id ON Flight_Number(airport_goal_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_airline_id' AND object_id = OBJECT_ID('Flight_Number'))
    BEGIN
        CREATE INDEX idx_airline_id ON Flight_Number(airline_id);
    END
END
GO


IF OBJECT_ID('Flight') IS NULL
BEGIN
    CREATE TABLE Flight (
    id INT PRIMARY KEY,
    boarding_time DATETIME CHECK (boarding_time >= GETDATE()),
    flight_date DATE CHECK (flight_date >= GETDATE()),
    gate NVARCHAR(100) CHECK (LEN(gate) > 0),
    check_in_counter INT CHECK (check_in_counter > 0),
    type_flight_id INT,
    status_flight_id INT,
    flight_number_id INT,
    FOREIGN KEY (flight_number_id) REFERENCES Flight_Number(id),
    FOREIGN KEY (status_flight_id) REFERENCES Status_Flight(id),
    FOREIGN KEY (type_flight_id) REFERENCES Type_Flight(id)
);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_flight_number_id' AND object_id = OBJECT_ID('Flight'))
    BEGIN
        CREATE INDEX idx_flight_number_id ON Flight(flight_number_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_status_flight_id' AND object_id = OBJECT_ID('Flight'))
    BEGIN
        CREATE INDEX idx_status_flight_id ON Flight(status_flight_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_type_flight_id' AND object_id = OBJECT_ID('Flight'))
    BEGIN
        CREATE INDEX idx_type_flight_id ON Flight(type_flight_id);
    END
END
GO


IF OBJECT_ID('Plane_Model') IS NULL
BEGIN
    CREATE TABLE Plane_Model (
    id INT PRIMARY KEY,
    description NVARCHAR(100) CHECK (LEN(description) > 0),
    graphic NVARCHAR(100) CHECK (LEN(graphic) > 0)
);
END
GO

IF OBJECT_ID('Airplane') IS NULL
BEGIN
    CREATE TABLE Airplane (
    id INT PRIMARY KEY,
    registration_number INT CHECK (registration_number > 0),
    Status NVARCHAR(100) CHECK (LEN(Status) > 0),
    plane_model_id INT,
    FOREIGN KEY (plane_model_id) REFERENCES Plane_Model(id)
);
END
GO

IF OBJECT_ID('Stopovers') IS NULL
BEGIN
    CREATE TABLE Stopovers (
        id INT PRIMARY KEY,
        stopover_order NVARCHAR(255) CHECK (LEN(stopover_order) > 0),
        stopover_arrival_time DATETIME CHECK (stopover_arrival_time > GETDATE()),
        stopover_departure_time DATETIME,
        airline_id INT,
        flight_number_id INT,
        flight_id INT,
        aiport_start_id INT,
        aiport_goal_id INT,
        FOREIGN KEY (flight_id) REFERENCES Flight(id),
		FOREIGN KEY (flight_number_id) REFERENCES Flight_Number(id),
        FOREIGN KEY (aiport_start_id) REFERENCES Airport(id),
        FOREIGN KEY (aiport_goal_id) REFERENCES Airport(id),
        FOREIGN KEY (airline_id) REFERENCES Airline(id)
    );
	IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_flight_id' AND object_id = OBJECT_ID('Stopovers'))
    BEGIN
        CREATE INDEX idx_flight_id ON Stopovers(flight_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_airport_start_id' AND object_id = OBJECT_ID('Stopovers'))
    BEGIN
        CREATE INDEX idx_airport_start_id ON Stopovers(airport_start_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_airport_goal_id' AND object_id = OBJECT_ID('Stopovers'))
    BEGIN
        CREATE INDEX idx_airport_goal_id ON Stopovers(airport_goal_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_flight_number_id' AND object_id = OBJECT_ID('Stopovers'))
    BEGIN
        CREATE INDEX idx_flight_number_id ON Stopovers(flight_number_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_airline_id' AND object_id = OBJECT_ID('Stopovers'))
    BEGIN
        CREATE INDEX idx_airline_id ON Stopovers(airline_id);
    END
END
GO


IF OBJECT_ID('Booking') IS NULL
BEGIN
    CREATE TABLE Booking (
    id INT PRIMARY KEY,
    booking_date DATE CHECK (booking_date <= GETDATE()),
    customer_id INT,
    booking_status_id INT,
    flight_id INT,
    FOREIGN KEY (customer_id) REFERENCES Customer(id),
    FOREIGN KEY (booking_status_id) REFERENCES Booking_Status(id),
    FOREIGN KEY (flight_id) REFERENCES Flight(id)
);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_customer_id_booking' AND object_id = OBJECT_ID('Booking'))
    BEGIN
        CREATE INDEX idx_customer_id_booking ON Booking(customer_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_booking_status_id' AND object_id = OBJECT_ID('Booking'))
    BEGIN
        CREATE INDEX idx_booking_status_id ON Booking(booking_status_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_flight_id_booking' AND object_id = OBJECT_ID('Booking'))
    BEGIN
        CREATE INDEX idx_flight_id_booking ON Booking(flight_id);
    END
END
GO



IF OBJECT_ID('Tripulante') IS NULL
BEGIN
    CREATE TABLE Tripulante (
    id INT PRIMARY KEY,
    codido_tripulante INT CHECK (codido_tripulante > 0)
);
END
GO


IF OBJECT_ID('Gate') IS NULL
BEGIN
    CREATE TABLE Gate (
    id INT PRIMARY KEY,
    name NVARCHAR(100) CHECK (LEN(name) > 0),
    location NVARCHAR(100) CHECK (LEN(location) > 0),
    gate_assignment_status_id INT,
    airport_id INT,
    FOREIGN KEY (gate_assignment_status_id) REFERENCES Gate_Assignment_Status(id),
    FOREIGN KEY (airport_id) REFERENCES Airport(id)
);
END
GO


IF OBJECT_ID('Gate_Assignment') IS NULL
BEGIN
    CREATE TABLE Gate_Assignment (
    id INT PRIMARY KEY,
    assignment_date DATE CHECK (assignment_date <= GETDATE()),
    gate_id INT,
    stopovers_id INT,
    flight_id INT,
    FOREIGN KEY (stopovers_id) REFERENCES Stopovers(id),
    FOREIGN KEY (flight_id) REFERENCES Flight(id),
    FOREIGN KEY (gate_id) REFERENCES Gate(id)
);
END
GO


IF OBJECT_ID('Asingnacion_Tripulantes') IS NULL
BEGIN
    CREATE TABLE Asingnacion_Tripulantes (
    id INT PRIMARY KEY,
    assignment_date DATE CHECK (assignment_date <= GETDATE()),
    rol_tripulante_id INT,
    tripulante_id INT,
    gate_assignment_id INT,
    FOREIGN KEY (rol_tripulante_id) REFERENCES Rol_Tripulante(id),
    FOREIGN KEY (tripulante_id) REFERENCES Tripulante(id),
    FOREIGN KEY (gate_assignment_id) REFERENCES Gate_Assignment(id)
);
END
GO


IF OBJECT_ID('Pasajero') IS NULL
BEGIN
    CREATE TABLE Pasajero (
    id INT PRIMARY KEY,
    genero NVARCHAR(100) CHECK (LEN(genero) > 0),
    estado_civil NVARCHAR(100) CHECK (LEN(estado_civil) > 0)
);
END
GO


IF OBJECT_ID('Person') IS NULL
BEGIN
    CREATE TABLE Person (
    id INT PRIMARY KEY,
    first_name NVARCHAR(100) CHECK (LEN(first_name) > 0),
    last_name NVARCHAR(100) CHECK (LEN(last_name) > 0),
    phone_number NVARCHAR(100) CHECK (LEN(phone_number) > 0),
    email NVARCHAR(100) CHECK (LEN(email) > 0),
    type_person_id INT,
    pasajero_id INT,
    tripulante_id INT,
    FOREIGN KEY (tripulante_id) REFERENCES Tripulante(id),
    FOREIGN KEY (type_person_id) REFERENCES Type_Person(id),
    FOREIGN KEY (pasajero_id) REFERENCES Pasajero(id)
);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_tripulante_id' AND object_id = OBJECT_ID('Person'))
    BEGIN
        CREATE INDEX idx_tripulante_id ON Person(tripulante_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_type_person_id' AND object_id = OBJECT_ID('Person'))
    BEGIN
        CREATE INDEX idx_type_person_id ON Person(type_person_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_pasajero_id' AND object_id = OBJECT_ID('Person'))
    BEGIN
        CREATE INDEX idx_pasajero_id ON Person(pasajero_id);
    END
END
GO



IF OBJECT_ID('Document') IS NULL
BEGIN
    CREATE TABLE Document (
        id INT PRIMARY KEY,
        issue_date DATE CHECK (issue_date <= GETDATE()),
        due_date DATE,
        document_number INT CHECK (document_number > 0),
        type_document_id INT,
        person_id INT,
        country_id INT,
        FOREIGN KEY (country_id) REFERENCES Country(id),
        FOREIGN KEY (person_id) REFERENCES Person(id),
        FOREIGN KEY (type_document_id) REFERENCES Type_Document(id)
    );
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_document_country_id' AND object_id = OBJECT_ID('Document'))
    BEGIN
        CREATE INDEX idx_document_country_id ON Document(country_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_document_person_id' AND object_id = OBJECT_ID('Document'))
    BEGIN
        CREATE INDEX idx_document_person_id ON Document(person_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_document_type_document_id' AND object_id = OBJECT_ID('Document'))
    BEGIN
        CREATE INDEX idx_document_type_document_id ON Document(type_document_id);
    END
END
GO



IF OBJECT_ID('Document_Presentation') IS NULL
BEGIN
    CREATE TABLE Document_Presentation (
    id INT PRIMARY KEY,
    presentation_date DATE CHECK (presentation_date <= GETDATE()),
    customer_id INT,
    document_id INT,
    booking_id INT,
    FOREIGN KEY (booking_id) REFERENCES Booking(id),
    FOREIGN KEY (customer_id) REFERENCES Customer(id),
    FOREIGN KEY (document_id) REFERENCES Document(id)
);
END
GO


IF OBJECT_ID('Credit_Card') IS NULL
BEGIN
    CREATE TABLE Credit_Card (
    id INT PRIMARY KEY,
    card_number NVARCHAR(50) CHECK (LEN(card_number) > 0),
    cardholder_name NVARCHAR(100) CHECK (LEN(cardholder_name) > 0),
    expiration_date DATE CHECK (expiration_date > GETDATE()),
    cvv NVARCHAR(50) CHECK (LEN(cvv) > 0)
);
END
GO


IF OBJECT_ID('Transferencia_Bancaria') IS NULL
BEGIN
    CREATE TABLE Transferencia_Bancaria (
    id INT PRIMARY KEY,
    account_number NVARCHAR(50) CHECK (LEN(account_number) > 0),
    bank_number INT CHECK (bank_number > 0),
    iban INT CHECK (iban > 0),
    swift_code NVARCHAR(50) CHECK (LEN(swift_code) > 0)
);
END
GO


IF OBJECT_ID('Cash') IS NULL
BEGIN
    CREATE TABLE Cash (
    id INT PRIMARY KEY
);
END
GO


IF OBJECT_ID('Payment_Method') IS NULL
BEGIN
    CREATE TABLE Payment_Method (
    id INT PRIMARY KEY,
    description NVARCHAR(255),
    credit_card_id INT,
    transferencia_bancaria_id INT,
    cash_id INT,
    FOREIGN KEY (credit_card_id) REFERENCES Credit_Card(id),
    FOREIGN KEY (transferencia_bancaria_id) REFERENCES Transferencia_Bancaria(id),
    FOREIGN KEY (cash_id) REFERENCES Cash(id)
);
END
GO


IF OBJECT_ID('Payment') IS NULL
BEGIN
    CREATE TABLE Payment (
    id INT PRIMARY KEY,
    date_payment DATE CHECK (date_payment <= GETDATE()),
    amount INT CHECK (amount > 0),
    payment_status_id INT,
    booking_id INT,
    payment_method_id INT,
    FOREIGN KEY (payment_method_id) REFERENCES Payment_Method(id),
    FOREIGN KEY (booking_id) REFERENCES Booking(id),
    FOREIGN KEY (payment_status_id) REFERENCES Payment_Status(id)
);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_booking_id' AND object_id = OBJECT_ID('Payment'))
    BEGIN
        CREATE INDEX idx_booking_id ON Payment(booking_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_payment_method_id' AND object_id = OBJECT_ID('Payment'))
    BEGIN
        CREATE INDEX idx_payment_method_id ON Payment(payment_method_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_payment_status_id' AND object_id = OBJECT_ID('Payment'))
    BEGIN
        CREATE INDEX idx_payment_status_id ON Payment(payment_status_id);
    END
END
GO



IF OBJECT_ID('Currency_Assignment') IS NULL
BEGIN
    CREATE TABLE Currency_Assignment (
    id INT PRIMARY KEY,
    assignment_date DATE CHECK (assignment_date <= GETDATE()),
    currency_id INT,
    payment_id INT,
    FOREIGN KEY (payment_id) REFERENCES Payment(id),
    FOREIGN KEY (currency_id) REFERENCES Currency(id)
);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_payment_id_currency' AND object_id = OBJECT_ID('Currency_Assignment'))
    BEGIN
        CREATE INDEX idx_payment_id_currency ON Currency_Assignment(payment_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_currency_id' AND object_id = OBJECT_ID('Currency_Assignment'))
    BEGIN
        CREATE INDEX idx_currency_id ON Currency_Assignment(currency_id);
    END
END
GO


IF OBJECT_ID('Cancellation_Bookin') IS NULL
BEGIN
    CREATE TABLE Cancellation_Booking (
    id INT PRIMARY KEY,
    cancellation_date DATE CHECK (cancellation_date <= GETDATE()),
    cancellation_reason NVARCHAR(255),
    penalty_cancellation_id INT,
    booking_id INT,
    FOREIGN KEY (booking_id) REFERENCES Booking(id),
    FOREIGN KEY (penalty_cancellation_id) REFERENCES Penalty_Cancellation(id)
);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_booking_id_cancellation' AND object_id = OBJECT_ID('Cancellation_Booking'))
    BEGIN
        CREATE INDEX idx_booking_id_cancellation ON Cancellation_Booking(booking_id);
    END
	IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_penalty_cancellation_id' AND object_id = OBJECT_ID('Cancellation_Booking'))
    BEGIN
        CREATE INDEX idx_penalty_cancellation_id ON Cancellation_Booking(penalty_cancellation_id);
    END
END
GO



IF OBJECT_ID('Ticket') IS NULL
BEGIN
    CREATE TABLE Ticket (
    id INT PRIMARY KEY,
    number INT CHECK (number > 0),
    ticketing_code INT CHECK (ticketing_code > 0),
    ticket_category_id INT,
    check_in_id INT,
    booking_id INT,
    FOREIGN KEY (booking_id) REFERENCES Booking(id),
    FOREIGN KEY (ticket_category_id) REFERENCES Ticket_Category(id),
    FOREIGN KEY (check_in_id) REFERENCES Check_In(id)
);
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_ticket_category_id' AND object_id = OBJECT_ID('Ticket'))
    BEGIN
        CREATE INDEX idx_ticket_category_id ON Ticket(ticket_category_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_booking_id_ticket' AND object_id = OBJECT_ID('Ticket'))
    BEGIN
        CREATE INDEX idx_booking_id_ticket ON Ticket(booking_id);
    END
    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'idx_check_in_id_ticket' AND object_id = OBJECT_ID('Ticket'))
    BEGIN
        CREATE INDEX idx_check_in_id_ticket ON Ticket(check_in_id);
    END
END
GO



IF OBJECT_ID('Status_Assignment') IS NULL
BEGIN
    CREATE TABLE Status_Assignment (
    id INT PRIMARY KEY,
    assignment_date DATE CHECK (assignment_date <= GETDATE()),
    status_ticket_id INT,
    ticket_id INT,
    FOREIGN KEY (status_ticket_id) REFERENCES Status_Ticket(id),
    FOREIGN KEY (ticket_id) REFERENCES Ticket(id)
);
END
GO


IF OBJECT_ID('Seat') IS NULL
BEGIN
    CREATE TABLE Seat (
    id INT PRIMARY KEY,
    size NVARCHAR(255),
    number INT CHECK (number > 0),
    plane_id INT,
    FOREIGN KEY (plane_id) REFERENCES Plane_Model(id)
);
END
GO


IF OBJECT_ID('Coupon') IS NULL
BEGIN
    CREATE TABLE Coupon (
    id INT PRIMARY KEY,
    date_of_redemption DATE CHECK (date_of_redemption <= GETDATE()),
    class NVARCHAR(100),
    stand_by NVARCHAR(100),
    meal_code INT,
    ticket_id INT,
    flight_id INT,
    FOREIGN KEY (flight_id) REFERENCES Flight(id),
    FOREIGN KEY (ticket_id) REFERENCES Ticket(id)
);
END
GO


IF OBJECT_ID('Available_Seat') IS NULL
BEGIN
    CREATE TABLE Available_Seat (
    id INT PRIMARY KEY,
    status_ft_id INT,
    coupon_id INT,
    flight_id INT,
    seat_id INT,
    FOREIGN KEY (seat_id) REFERENCES Seat(id),
    FOREIGN KEY (flight_id) REFERENCES Flight(id),
    FOREIGN KEY (coupon_id) REFERENCES Coupon(id),
    FOREIGN KEY (status_ft_id) REFERENCES Status_FT(id)
);
END
GO


IF OBJECT_ID('Pieces_of_Luggage') IS NULL
BEGIN
    CREATE TABLE Pieces_of_Luggage (
    id INT PRIMARY KEY,
    weight_of_pieces DECIMAL(5, 2) CHECK (weight_of_pieces >= 0),
    amount_luggages INT CHECK (amount_luggages >= 0),
    total_rate INT CHECK (total_rate >= 0),
    coupon_id INT,
    FOREIGN KEY (coupon_id) REFERENCES Coupon(id)
);
END
GO


IF OBJECT_ID('Check_In_Luggage') IS NULL
BEGIN
    CREATE TABLE Check_In_Luggage (
    id INT PRIMARY KEY,
    checking_date DATE CHECK (checking_date <= GETDATE()),
    status NVARCHAR(50),
    pieces_of_luggage_id INT,
    FOREIGN KEY (pieces_of_luggage_id) REFERENCES Pieces_of_Luggage(id)
);
END
GO


IF OBJECT_ID('Luggage') IS NULL
BEGIN
    CREATE TABLE Luggage (
    id INT PRIMARY KEY,
    code_luggage INT CHECK (code_luggage > 0),
    dimensions NVARCHAR(100),
    weight DECIMAL(5, 2) CHECK (weight >= 0),
    pieces_of_luggage_id INT,
    FOREIGN KEY (pieces_of_luggage_id) REFERENCES Pieces_of_Luggage(id)
);
END
GO


IF OBJECT_ID('Flight_Cancellation') IS NULL
BEGIN
    CREATE TABLE Flight_Cancellation (
    id INT PRIMARY KEY,
    cancellation_time DATETIME CHECK (cancellation_time <= GETDATE()),
    cancellation_reason NVARCHAR(255),
    responsible_party NVARCHAR(255),
    flight_number INT,
    compensation_detail INT,
    FOREIGN KEY (flight_number) REFERENCES Flight_Number(id),
    FOREIGN KEY (compensation_detail) REFERENCES Compensation_Detail(id)
);
END
GO


    PRINT 'Operaci�n exitosa';
    COMMIT TRANSACTION;
END TRY

BEGIN CATCH
    ROLLBACK TRANSACTION;
    PRINT 'Error al crear tablas: ' + ERROR_MESSAGE();
END CATCH;
GO
BEGIN TRANSACTION

